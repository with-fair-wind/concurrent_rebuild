// 条件竞争
// std::cout 的 operator<< 调用是线程安全的，不会被打断。
// 即：同步的 C++ 流保证是线程安全的（从多个线程输出的单独字符可能交错，但无数据竞争）
void f() { std::cout << "❤️\n"; }
void f2() { std::cout << "😢\n"; }

int main() {
    std::thread t{f};
    std::thread t2{f2};
    t.join();
    t2.join();
}
/*
当某个表达式的求值写入某个内存位置，而另一求值读或修改同一内存位置时，称这些表达式冲突。
拥有两个冲突的求值的程序就有数据竞争，除非:
1: 两个求值都在同一线程上，或者在同一信号处理函数中执行
2: 两个冲突的求值都是原子操作（见 std::atomic）
3: 一个冲突的求值发生早于 另一个（见 std::memory_order）
如果出现数据竞争，那么程序的行为未定义。
// 标量类型等都同理
*/